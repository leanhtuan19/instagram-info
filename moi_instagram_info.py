import os
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)
# Cho ph√©p Cross-Origin Resource Sharing (CORS) ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API
CORS(app)

# üîê D√ÅN TR·ª∞C TI·∫æP SESSION_ID V√Ä CSRF_TOKEN C·ª¶A B·∫†N V√ÄO ƒê√ÇY
# L·∫•y c√°c gi√° tr·ªã n√†y t·ª´ cookie c·ªßa tr√¨nh duy·ªát sau khi ƒëƒÉng nh·∫≠p Instagram
SESSION_ID = "D√ÅN_GI√Å_TR·ªä_SESSIONID_M·ªöI_C·ª¶A_B·∫†N_V√ÄO_ƒê√ÇY"
CSRF_TOKEN = "61843189970%3AvhDdOCsdfCCYu1%3A26%3AAYdXhf1rv5MQnHrUoKIufmUSFDob_CTgtvn12C1P3w"
APP_ID = "936619743392459"  # ID n√†y th∆∞·ªùng kh√¥ng thay ƒë·ªïi

# T·∫°o m·ªôt route duy nh·∫•t ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ c√°c y√™u c·∫ßu
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def handler(path):
    # L·∫•y c√°c tham s·ªë t·ª´ URL (v√≠ d·ª•: ?username=abc&action=posts)
    username = request.args.get("username")
    action = request.args.get("action", "userinfo")
    max_count = request.args.get("count", 12)

    # --- Ki·ªÉm tra ƒë·∫ßu v√†o ---
    if not username:
        return jsonify({"error": "Thi·∫øu tham s·ªë 'username'"}), 400

    if SESSION_ID == "D√ÅN_GI√Å_TR·ªä_SESSIONID_M·ªöI_C·ª¶A_B·∫†N_V√ÄO_ƒê√ÇY" or CSRF_TOKEN == "D√ÅN_GI√Å_TR·ªä_CSRFTOKEN_M·ªöI_C·ª¶A_B·∫†N_V√ÄO_ƒê√ÇY":
        return jsonify({"error": "L·ªói c·∫•u h√¨nh: Vui l√≤ng c·∫≠p nh·∫≠t SESSION_ID v√† CSRF_TOKEN trong file code."}), 500

    # --- Chu·∫©n b·ªã header cho y√™u c·∫ßu ƒë·∫øn Instagram ---
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36',
        'X-IG-App-ID': APP_ID,
        'X-CSRFToken': CSRF_TOKEN,
        'Cookie': f'sessionid={SESSION_ID}; csrftoken={CSRF_TOKEN}',
    }

    try:
        # --- L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ user_id ---
        user_info_url = f'https://www.instagram.com/api/v1/users/web_profile_info/?username={username}'
        user_info_res = requests.get(user_info_url, headers=headers)
        
        if user_info_res.status_code != 200:
            return jsonify({"error": "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng", "status_code": user_info_res.status_code}), user_info_res.status_code

        user_data = user_info_res.json().get('data', {}).get('user', {})
        if not user_data:
            return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"}), 404

        # --- X·ª≠ l√Ω theo h√†nh ƒë·ªông (action) ---
        if action == 'userinfo':
            # Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
            return jsonify(user_data)

        elif action == 'posts':
            user_id = user_data.get('id')
            if not user_id:
                return jsonify({"error": "Kh√¥ng l·∫•y ƒë∆∞·ª£c User ID"}), 400
            
            # Endpoint n√†y d√πng ƒë·ªÉ l·∫•y c√°c b√†i ƒëƒÉng
            post_url = f'https://www.instagram.com/api/v1/feed/user/{user_id}/?count={max_count}'
            posts_res = requests.get(post_url, headers=headers)

            if posts_res.status_code != 200:
                 return jsonify({"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i ƒëƒÉng", "status_code": posts_res.status_code}), posts_res.status_code
            
            # Tr·∫£ v·ªÅ danh s√°ch b√†i ƒëƒÉng
            return jsonify(posts_res.json())

        else:
            return jsonify({"error": "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá"}), 400

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Vercel s·∫Ω t·ª± ƒë·ªông ch·∫°y ·ª©ng d·ª•ng Flask n√†y
